#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int key, height;
    struct Node *left, *right;
} Node;
int height(Node* n) {
    return n ? n->height : 0;
}
int max(int a, int b) {
    return (a > b) ? a : b;
}
Node* newNode(int key) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->height = 1;
    node->left = node->right = NULL;
    return node;
}
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}
int getBalance(Node* n) {
    if (!n) return 0;
    return height(n->left) - height(n->right);
}
Node* insert(Node* node, int key) {
    if (node == NULL)
        return newNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else  // Equal keys not allowed
        return node;
    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Delete a node with given key from AVL tree
Node* deleteNode(Node* root, int key) {
    if (root == NULL)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);

    else if (key > root->key)
        root->right = deleteNode(root->right, key);

    else {
        // Node with one or no child
        if ((root->left == NULL) || (root->right == NULL)) {
            Node* temp = root->left ? root->left : root->right;

            if (temp == NULL) {  // No child
                temp = root;
                root = NULL;
            }
            else  // One child
                *root = *temp;  // Copy contents

            free(temp);
        }
        else {
            // Node with two children
            Node* temp = minValueNode(root->right);

            root->key = temp->key;

            root->right = deleteNode(root->right, temp->key);
        }
    }

    if (root == NULL)
        return root;

    root->height = 1 + max(height(root->left), height(root->right));

    int balance = getBalance(root);

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Search key in AVL tree
int search(Node* root, int key) {
    if (root == NULL)
        return 0;
    if (key == root->key)
        return 1;
    else if (key < root->key)
        return search(root->left, key);
    else
        return search(root->right, key);
}

// Inorder traversal of AVL tree
void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

int main() {
    Node* root = NULL;
    int choice, val;

    printf("AVL Tree Operations:\n");
    printf("1.Insert\n2.Delete\n3.Search\n4.Inorder traversal\n5.Exit\n");

    while (1) {
        printf("\nEnter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to insert: ");
                scanf("%d", &val);
                root = insert(root, val);
                printf("%d inserted.\n", val);
                break;

            case 2:
                printf("Enter element to delete: ");
                scanf("%d", &val);
                root = deleteNode(root, val);
                printf("%d deleted (if it existed).\n", val);
                break;

            case 3:
                printf("Enter element to search: ");
                scanf("%d", &val);
                if (search(root, val))
                    printf("%d found in AVL tree.\n", val);
                else
                    printf("%d NOT found in AVL tree.\n", val);
                break;

            case 4:
                printf("AVL tree inorder traversal: ");
                inorder(root);
                printf("\n");
                break;

            case 5:
                exit(0);

            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;
}

OUTPUT
S.AKILA(192424331)

AVL Tree Operations:
1.Insert
2.Delete
3.Search
4.Inorder traversal
5.Exit

Enter choice: 1
Enter element to insert: 10
10 inserted.

Enter choice: 1
Enter element to insert: 20
20 inserted.

Enter choice: 1
Enter element to insert: 30
30 inserted.

Enter choice: 4
AVL tree inorder traversal: 10 20 30

Enter choice: 3
Enter element to search: 20
20 found in AVL tree.

Enter choice: 2
Enter element to delete: 20
20 deleted (if it existed).

Enter choice: 4
AVL tree inorder traversal: 10 30

Enter choice: 3
Enter element to search: 20
20 NOT found in AVL tree.

Enter choice: 5
