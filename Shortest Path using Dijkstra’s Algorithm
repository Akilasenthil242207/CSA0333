#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF INT_MAX

int minDistance(int dist[], int visited[], int n) {
    int min = INF, min_index = -1;
    for (int v = 0; v < n; v++)
        if (!visited[v] && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

void dijkstra(int graph[][MAX], int n, int src) {
    int dist[MAX];
    int visited[MAX] = {0};

    for (int i = 0; i < n; i++)
        dist[i] = INF;
    dist[src] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited, n);
        if (u == -1) break;
        visited[u] = 1;
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INF &&
                dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
        }
    }

    printf("Vertex\tDistance from Source %d\n", src);
    for (int i = 0; i < n; i++)
        printf("%d\t%d\n", i, dist[i]);
}

int main() {
    int n = 5;
    int graph[MAX][MAX] = {0};

    // weighted graph
    graph[0][1] = 10; graph[0][4] = 5;
    graph[1][2] = 1; graph[1][4] = 2;
    graph[2][3] = 4;
    graph[3][0] = 7; graph[3][2] = 6;
    graph[4][1] = 3; graph[4][2] = 9; graph[4][3] = 2;

    dijkstra(graph, n, 0);
    return 0;
}

Output:
Vertex  Distance from Source 0
0       0
1       8
2       9
3       7
4       5
