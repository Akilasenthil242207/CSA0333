#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

int stack[MAX];
int top = -1;

// Stack functions for characters
char charStack[MAX];
int charTop = -1;

void pushChar(char c) {
    charStack[++charTop] = c;
}

char popChar() {
    return charStack[charTop--];
}

char peekChar() {
    return charStack[charTop];
}

int isEmptyCharStack() {
    return charTop == -1;
}

// Stack functions for integers (used in evaluation)
void push(int x) {
    stack[++top] = x;
}

int pop() {
    return stack[top--];
}

// Check precedence of operators
int precedence(char op) {
    if (op == '^') return 3;
    else if (op == '*' || op == '/') return 2;
    else if (op == '+' || op == '-') return 1;
    else return 0;
}

// Convert infix to postfix
void infixToPostfix(char infix[], char postfix[]) {
    int i, j = 0;
    char ch;

    for (i = 0; infix[i] != '\0'; i++) {
        ch = infix[i];

        if (isalnum(ch)) {
            postfix[j++] = ch;
        }
        else if (ch == '(') {
            pushChar(ch);
        }
        else if (ch == ')') {
            while (!isEmptyCharStack() && peekChar() != '(')
                postfix[j++] = popChar();
            popChar(); // pop '('
        }
        else {
            while (!isEmptyCharStack() && precedence(peekChar()) >= precedence(ch))
                postfix[j++] = popChar();
            pushChar(ch);
        }
    }

    while (!isEmptyCharStack())
        postfix[j++] = popChar();

    postfix[j] = '\0';
}

// Evaluate postfix expression
int evaluatePostfix(char postfix[]) {
    int i, op1, op2, result;
    char ch;

    for (i = 0; postfix[i] != '\0'; i++) {
        ch = postfix[i];

        if (isdigit(ch)) {
            push(ch - '0'); // convert char to int
        }
        else {
            op2 = pop();
            op1 = pop();
            switch (ch) {
                case '+': result = op1 + op2; break;
                case '-': result = op1 - op2; break;
                case '*': result = op1 * op2; break;
                case '/': result = op1 / op2; break;
                case '^': result = 1;
                          for (int j = 0; j < op2; j++) result *= op1;
                          break;
            }
            push(result);
        }
    }

    return pop();
}

// Main function
int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter a valid infix expression (single-digit operands): ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix Expression: %s\n", postfix);

    // Check if postfix expression has digits to evaluate
    int i, valid = 1;
    for (i = 0; postfix[i]; i++) {
        if (!isdigit(postfix[i]) && !strchr("+-*/^", postfix[i])) {
            valid = 0;
            break;
        }
    }

    if (valid) {
        int result = evaluatePostfix(postfix);
        printf("Evaluation Result: %d\n", result);
    } else {
        printf("Postfix expression contains variables, cannot evaluate without values.\n");
    }

    return 0;
}
output
192424331 AKILA 
Enter a valid infix expression (single-digit operands): 3+(2*4)-5
Postfix Expression: 324*+5-
Evaluation Result: 6


=== Code Execution Successful ===
