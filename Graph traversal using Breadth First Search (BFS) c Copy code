#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int items[MAX];
    int front, rear;
} Queue;

void initQueue(Queue *q) {
    q->front = q->rear = -1;
}

int isEmpty(Queue *q) {
    return q->front == -1;
}

void enqueue(Queue *q, int val) {
    if (q->rear == MAX - 1) return; // queue full
    if (q->front == -1) q->front = 0;
    q->items[++q->rear] = val;
}

int dequeue(Queue *q) {
    if (isEmpty(q)) return -1;
    int val = q->items[q->front];
    if (q->front >= q->rear) q->front = q->rear = -1;
    else q->front++;
    return val;
}

void BFS(int graph[][MAX], int n, int start) {
    int visited[MAX] = {0};
    Queue q;
    initQueue(&q);

    visited[start] = 1;
    enqueue(&q, start);

    printf("BFS traversal: ");
    while (!isEmpty(&q)) {
        int u = dequeue(&q);
        printf("%d ", u);
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !visited[v]) {
                visited[v] = 1;
                enqueue(&q, v);
            }
        }
    }
    printf("\n");
}

int main() {
    int n = 5;
    int graph[MAX][MAX] = {0};

    // Example graph (adjacency matrix)
    // 0 - 1 - 4
    // |   |
    // 2 - 3
    graph[0][1] = graph[1][0] = 1;
    graph[0][2] = graph[2][0] = 1;
    graph[1][3] = graph[3][1] = 1;
    graph[2][3] = graph[3][2] = 1;
    graph[1][4] = graph[4][1] = 1;

    BFS(graph, n, 0);
    return 0;
}

Output:
BFS traversal: 0 1 2 4 3
